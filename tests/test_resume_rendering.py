import os
import shutil
import sys
import tempfile
from pathlib import Path

import pytest

ROOT = Path(__file__).resolve().parents[1]
SRC_PATH = ROOT / "src"
if str(SRC_PATH) not in sys.path:
    sys.path.insert(0, str(SRC_PATH))

from myagent.settings import load_settings
from myagent.filesystem import init_filesystems
from myagent.resume_renderer import render_resume, compile_tex

FIXTURE_ROOT = ROOT / "tests" / "fixtures" / "test_data"

settings = load_settings(
    data_dir=os.getenv("TEST_RESUME_DATA_DIR") or (FIXTURE_ROOT / "resumes"),
    summary_path=os.getenv("TEST_RESUME_SUMMARY_PATH") or (FIXTURE_ROOT / "resume_summary.yaml"),
    jd_dir=os.getenv("TEST_RESUME_JD_DIR") or (FIXTURE_ROOT / "jd"),
)

# Initialize filesystems for tests
init_filesystems(settings.resume_fs_url, settings.jd_fs_url)


@pytest.mark.skipif(shutil.which("xelatex") is None, reason="xelatex is required to compile PDF")
def test_render_resume_to_pdf():
    tex_output = render_resume("resume")
    with tempfile.TemporaryDirectory() as tmpdir:
        tex_path = Path(tmpdir) / "resume.tex"
        tex_path.write_text(tex_output, encoding="utf-8")
        template_root = ROOT / "templates"
        shutil.copy(template_root / "awesome-cv.cls", tex_path.parent)
        fonts_src = template_root / "fonts"
        fonts_dst = tex_path.parent / "fonts"
        if fonts_src.exists():
            shutil.copytree(fonts_src, fonts_dst)
        compile_tex(tex_path)
        pdf_path = tex_path.with_suffix(".pdf")
        print(f"Generated PDF at: {pdf_path}")
        assert pdf_path.exists(), "Expected PDF to be generated by xelatex"
