import os
import shutil
import sys
import tempfile
from pathlib import Path

import pytest

ROOT = Path(__file__).resolve().parents[1]
SRC_PATH = ROOT / "src"
if str(SRC_PATH) not in sys.path:
    sys.path.insert(0, str(SRC_PATH))

from myagent.settings import load_settings
from myagent.filesystem import init_filesystems, reset_filesystems
from myagent.resume_renderer import (
    render_resume,
    compile_tex,
    markdown_inline_to_latex,
    escape_tex,
    _normalize_metadata,
)
from myagent.tools import compile_resume_pdf_tool

FIXTURE_ROOT = ROOT / "tests" / "fixtures" / "test_data"

settings = load_settings(
    data_dir=os.getenv("TEST_RESUME_DATA_DIR") or (FIXTURE_ROOT / "resumes"),
    summary_path=os.getenv("TEST_RESUME_SUMMARY_PATH") or (FIXTURE_ROOT / "resume_summary.yaml"),
    jd_dir=os.getenv("TEST_RESUME_JD_DIR") or (FIXTURE_ROOT / "jd"),
)

# Initialize filesystems for tests
init_filesystems(settings.resume_fs_url, settings.jd_fs_url)


@pytest.mark.skipif(shutil.which("xelatex") is None, reason="xelatex is required to compile PDF")
def test_render_resume_to_pdf():
    tex_output = render_resume("resume")
    with tempfile.TemporaryDirectory() as tmpdir:
        tex_path = Path(tmpdir) / "resume.tex"
        tex_path.write_text(tex_output, encoding="utf-8")
        template_root = ROOT / "templates"
        shutil.copy(template_root / "awesome-cv.cls", tex_path.parent)
        fonts_src = template_root / "fonts"
        fonts_dst = tex_path.parent / "fonts"
        if fonts_src.exists():
            shutil.copytree(fonts_src, fonts_dst)
        compile_tex(tex_path)
        pdf_path = tex_path.with_suffix(".pdf")
        print(f"Generated PDF at: {pdf_path}")
        assert pdf_path.exists(), "Expected PDF to be generated by xelatex"


def test_markdown_unicode_dash_and_times_conversion():
    latex = markdown_inline_to_latex("Achieved 2–3× faster inference")
    assert "--" in latex
    assert "$\\times$" in latex
    assert "\\textperiodcentered" in markdown_inline_to_latex("Mountain View · Remote")
    assert "\\textperiodcentered" in escape_tex("Mountain View · Remote")


def test_compile_exports_latex_assets(monkeypatch, tmp_path):
    original_settings = settings
    reset_filesystems()

    resume_dir = tmp_path / "resumes"
    jd_dir = tmp_path / "jd"
    output_dir = tmp_path / "output"
    resume_dir.mkdir(parents=True, exist_ok=True)
    jd_dir.mkdir(parents=True, exist_ok=True)
    output_dir.mkdir(parents=True, exist_ok=True)

    init_filesystems(str(resume_dir), str(jd_dir), str(output_dir))

    def fake_compile(tex_path):
        pdf_path = tex_path.with_suffix(".pdf")
        pdf_path.write_bytes(b"%PDF-1.4\n% fake\n")

    monkeypatch.setattr("myagent.tools.compile_tex", fake_compile)

    tex_content = r"\documentclass{article}\begin{document}Hello\end{document}"
    result = compile_resume_pdf_tool(tex_content, "debug")

    assert result.latex_assets_dir is not None
    debug_dir_name = result.latex_assets_dir.rsplit("/", 1)[-1]
    debug_dir_path = output_dir / debug_dir_name
    assert debug_dir_path.exists()
    assert (debug_dir_path / "resume.tex").exists()

    reset_filesystems()
    init_filesystems(original_settings.resume_fs_url, original_settings.jd_fs_url)


@pytest.mark.parametrize(
    "raw,expected",
    [
        ("bugparty", "bugparty"),
        ("github.com/bugparty", "bugparty"),
        ("https://github.com/bugparty", "bugparty"),
        ("https://github.com/bugparty/", "bugparty"),
        ("https://github.com/bugparty/awesome", "bugparty"),
        ("HTTP://github.com/BugParty", "BugParty"),
    ],
)
def test_normalize_metadata_github_handle(raw, expected):
    normalized = _normalize_metadata({"github": raw})
    assert normalized["github"] == expected


@pytest.mark.parametrize(
    "raw,expected",
    [
        ("bowmanhan", "bowmanhan"),
        ("linkedin.com/in/bowmanhan", "bowmanhan"),
        ("https://www.linkedin.com/in/bowmanhan", "bowmanhan"),
        ("https://linkedin.com/in/bowmanhan/", "bowmanhan"),
        ("https://linkedin.com/company/example", "example"),
        ("LINKEDIN.COM/in/BowManHan", "BowManHan"),
    ],
)
def test_normalize_metadata_linkedin_slug(raw, expected):
    normalized = _normalize_metadata({"linkedin": raw})
    assert normalized["linkedin"] == expected
